"use client";

import { useEffect, useMemo, useState } from "react";
import { useSearchParams } from "next/navigation";
import Navbar from "../components/Navbar";

/* ===== API base ===== */
const API = "http://localhost:8081"; // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á proxy ‡πÑ‡∏ß‡πâ ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô "/api" ‡πÑ‡∏î‡πâ

/* ===== fetch helper (‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà parse ‡πÅ‡∏•‡πâ‡∏ß) ===== */
async function fetchJSON<T>(url: string, init?: RequestInit): Promise<T> {
  try {
    const res = await fetch(url, { cache: "no-store", ...init });
    if (!res.ok) {
      const text = await res.text();
      throw new Error(`HTTP ${res.status} @ ${url} :: ${text.slice(0, 200)}`);
    }
    return res.json() as Promise<T>;
  } catch (e) {
    console.error("Fetch failed:", url, e);
    throw e;
  }
}

/* ===== Types (‡∏ï‡∏≤‡∏° controller ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ===== */
interface BookingUIResponse {
  id: number;
  roomId: number;
  catId: string;
  checkinDate: string | null;
  checkoutDate: string | null;
  status: string | null;
  createdAt: string | null;
}
interface BookingRow {
  id: number;
  userId: number;
  roomId: number;
  catId: number;
  checkinDate: string;
  checkoutDate: string;
  status: string;
  createdAt?: string;
}
interface CatRow { id: number; name: string }
interface RoomRow { id: number; price: number; roomNumber: string; status?: string; type?: string }
interface UserDTO { id: number; name?: string; lastname?: string; phonenumber?: string }

type PaymentMethod = "cash" | "transfer" | "credit";
type Charge = { label: string; amount: number };

/* ===== utils ===== */
function todayLocalYMD() {
  const d = new Date();
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, "0");
  const day = String(d.getDate()).padStart(2, "0");
  return `${y}-${m}-${day}`;
}
const fmtBaht = (n: number) => `‡∏ø${n.toLocaleString("th-TH")}`;
const nightsBetween = (d1: string, d2: string) => {
  const a = new Date(d1);
  const b = new Date(d2);
  const diff = Math.round((b.getTime() - a.getTime()) / (1000 * 60 * 60 * 24));
  return Math.max(1, diff || 1);
};

/* ===== page ===== */
export default function CheckoutPage() {
  const searchParams = useSearchParams();
  const queryBookingId = searchParams.get("bookingId");

  const [candidates, setCandidates] = useState<BookingUIResponse[]>([]);
  const [selectedId, setSelectedId] = useState<number | "">("");

  const [booking, setBooking] = useState<BookingRow | null>(null);
  const [cat, setCat] = useState<CatRow | null>(null);
  const [room, setRoom] = useState<RoomRow | null>(null);
  const [user, setUser] = useState<UserDTO | null>(null);
  const [catNameMap, setCatNameMap] = useState<Record<string, string>>({});
  
  const [paymentMethod, setPaymentMethod] = useState<PaymentMethod | "">("");
  const [loading, setLoading] = useState(true);
  const [loadingDetail, setLoadingDetail] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [actionMsg, setActionMsg] = useState<string | null>(null);

  /* 1) ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞ check-out ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (+ fallback) */
  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        setError(null);

        // ‡∏ä‡∏±‡πâ‡∏ô 1: today ‡∏à‡∏≤‡∏Å BE (‡∏Ñ‡∏¥‡∏î‡∏ß‡∏±‡∏ô Asia/Bangkok ‡πÅ‡∏•‡πâ‡∏ß)
        let list = await fetchJSON<BookingUIResponse[]>(`${API}/bookings/today`);

        // ‡∏ä‡∏±‡πâ‡∏ô 2: fallback -> /bookings/ui ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏á <= ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (local)
        if (!list || list.length === 0) {
          const ui = await fetchJSON<BookingUIResponse[]>(`${API}/bookings/ui`);
          const today = todayLocalYMD();
          list = ui.filter((x) => x.checkoutDate && x.checkoutDate <= today);
        }

        setCandidates(list);

        // ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ó‡∏≥ map id->name
        try {
        const cats = await fetchJSON<CatRow[]>(`${API}/cats`);
        const map: Record<string, string> = {};
        cats.forEach((c) => (map[String(c.id)] = c.name));
        setCatNameMap(map);
        } catch {
        setCatNameMap({});
        }
        if (queryBookingId) setSelectedId(Number(queryBookingId));
        else setSelectedId(list.length ? list[0].id : "");
      } catch (e: any) {
        setError(e.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
      } finally {
        setLoading(false);
      }
    })();
  }, [queryBookingId]);

  /* 2) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å id ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≤‡∏£‡∏≤‡∏á */
  useEffect(() => {
    if (!selectedId) {
      setBooking(null); setCat(null); setRoom(null); setUser(null);
      return;
    }
    (async () => {
      try {
        setLoadingDetail(true);
        setError(null);

        const bData = await fetchJSON<BookingRow>(`${API}/bookings/${selectedId}`);
        setBooking(bData);

        // user
        try {
          const uData = await fetchJSON<UserDTO>(`${API}/users/${bData.userId}`);
          setUser(uData);
        } catch { setUser(null); }

        // cat (‡∏•‡∏≠‡∏á /cats/{id} ‚Üí ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ fallback /cats)
        let c: CatRow | null = null;
        try {
          c = await fetchJSON<CatRow>(`${API}/cats/${bData.catId}`);
        } catch {
          const cats = await fetchJSON<CatRow[]>(`${API}/cats`);
          c = cats.find((x) => Number(x.id) === Number(bData.catId)) || null;
        }
        setCat(c);

        // room (‡∏•‡∏≠‡∏á /rooms/{id} ‚Üí ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ fallback /rooms)
        let r: RoomRow | null = null;
        try {
          r = await fetchJSON<RoomRow>(`${API}/rooms/${bData.roomId}`);
        } catch {
          const rooms = await fetchJSON<RoomRow[]>(`${API}/rooms`);
          r = rooms.find((x) => Number(x.id) === Number(bData.roomId)) || null;
        }
        setRoom(r);
      } catch (e: any) {
        setError(e.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
      } finally {
        setLoadingDetail(false);
      }
    })();
  }, [selectedId]);

  useEffect(() => {
  if (booking && cat?.name) {
    // map id -> name
    setCatNameMap(prev => ({
      ...prev,
      [String(booking.catId)]: cat.name,
    }));
  }
}, [booking, cat]);

// 4. ‡∏ñ‡πâ‡∏≤ candidates ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å catId ‡πÄ‡∏õ‡πá‡∏ô "-" ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ catId ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å booking
useEffect(() => {
  if (!booking) return;
  setCandidates(prev =>
    prev.map(c =>
      c.id === booking.id && (c.catId === "-" || !c.catId)
        ? { ...c, catId: String(booking.catId) }
        : c
    )
  );
}, [booking]);

  /* 3) charges */
  const charges: Charge[] = useMemo(() => {
    if (!booking || !room) return [];
    const nights = nightsBetween(booking.checkinDate, booking.checkoutDate);
    const roomCharge = (room.price || 0) * nights;
    return [
      { label: `${room.type || "Room"} ‡∏´‡πâ‡∏≠‡∏á ${room.roomNumber} (${nights} ‡∏Ñ‡∏∑‡∏ô)`, amount: roomCharge },
      { label: "‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å", amount: 150 },
      { label: "‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©", amount: 300 },
    ];
  }, [booking, room]);

  const total = useMemo(() => charges.reduce((s, c) => s + c.amount, 0), [charges]);

  /* 4) confirm checkout */
  const onConfirmCheckout = async () => {
    if (!selectedId) return;
    if (!paymentMethod) { setActionMsg("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô"); return; }
    try {
      setActionMsg(null);
      const res = await fetch(`${API}/bookings/${selectedId}/checkout`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ paymentMethod }),
      });
      if (!res.ok) throw new Error(await res.text());
      setActionMsg("‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Check-out ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } catch (e: any) {
      setActionMsg(`‚ùå ${e.message || "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}`);
    }
  };

  /* ===== UI ===== */
  if (loading) {
    return (<><Navbar /><div className="max-w-4xl mx-auto px-6 py-10 text-center">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div></>);
  }
  if (error) {
    return (<><Navbar /><div className="max-w-4xl mx-auto px-6 py-10 text-center text-red-500">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}</div></>);
  }

  return (
    <>
      <Navbar />
      <div className="bg-gray-50 min-h-screen">
        <div className="max-w-4xl mx-auto px-6 pt-10">
          <h1 className="text-2xl sm:text-3xl font-extrabold text-gray-900 flex items-center gap-2">
            <span>üí∞</span> ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏á‡∏¥‡∏ô / Check-out
          </h1>
        </div>

        <main className="max-w-4xl mx-auto px-6 py-6">
          <div className="bg-white rounded-lg shadow-md border border-gray-100">
            {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å booking */}
            <div className="p-5 border-b">
              <label className="block text-sm text-gray-600 mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Check-out</label>
              <div className="relative">
                <select
                  value={selectedId}
                  onChange={(e) => setSelectedId(e.target.value ? Number(e.target.value) : "")}
                  className="w-full rounded-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 text-sm"
                >
                  {candidates.length === 0 ? (
                    <option value="">‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Check-out ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‚Äî</option>
                ) : (
                    candidates.map((c) => {
                    const name =
                        c.catId && c.catId !== "-"
                        ? (catNameMap[c.catId] ?? `‡πÅ‡∏°‡∏ß #${c.catId}`)
                        : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏°‡∏ß";
                    return (
                        <option key={c.id} value={c.id}>
                        {name} ‚Äì ‡∏´‡πâ‡∏≠‡∏á {c.roomId}
                        </option>
                    );
                    })
                )}
                </select>
                <span className="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 text-gray-400">‚ñæ</span>
              </div>
            </div>

            <div className="p-5 grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ */}
              <section className="border rounded-md">
                <div className="px-4 py-3 border-b font-semibold text-gray-800">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</div>
                <div className="p-4">
                  {loadingDetail ? (
                    <div className="text-sm text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‚Ä¶</div>
                  ) : booking && room ? (
                    <div className="flex gap-4">
                      <div className="w-14 h-14 rounded-full bg-orange-200 flex items-center justify-center text-2xl">üê±</div>
                      <div className="text-sm">
                        <div className="font-semibold text-gray-800">{cat?.name || `‡πÅ‡∏°‡∏ß #${booking.catId}`}</div>
                        <div className="text-gray-500">{room.type || "Room"} ‚Äî ‡∏´‡πâ‡∏≠‡∏á {room.roomNumber}</div>

                        <dl className="mt-3 space-y-1 text-gray-600">
                          <div className="flex gap-2">
                            <dt className="w-20 text-gray-500">‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô:</dt>
                            <dd className="flex-1">{booking.checkinDate}</dd>
                          </div>
                          <div className="flex gap-2">
                            <dt className="w-20 text-gray-500">‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ï‡πå:</dt>
                            <dd className="flex-1">{booking.checkoutDate}</dd>
                          </div>
                          <div className="flex gap-2">
                            <dt className="w-20 text-gray-500">‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á:</dt>
                            <dd className="flex-1">{(user?.name || "") + (user?.lastname ? ` ${user.lastname}` : "") || "-"}</dd>
                          </div>
                          <div className="flex gap-2">
                            <dt className="w-20 text-gray-500">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</dt>
                            <dd className="flex-1">{user?.phonenumber || "-"}</dd>
                          </div>
                        </dl>
                      </div>
                    </div>
                  ) : (
                    <div className="text-sm text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
                  )}
                </div>
              </section>

              {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏á‡∏¥‡∏ô */}
              <section className="border rounded-md">
                <div className="px-4 py-3 border-b font-semibold text-gray-800">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏á‡∏¥‡∏ô</div>
                <div className="p-4">
                  {loadingDetail ? (
                    <div className="text-sm text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏á‡∏¥‡∏ô‚Ä¶</div>
                  ) : (
                    <>
                      <ul className="divide-y text-sm">
                        {charges.map((c, idx) => (
                          <li key={idx} className="py-2 flex items-center justify-between">
                            <span className="text-gray-700">{c.label}</span>
                            <span className="font-semibold text-gray-800">{fmtBaht(c.amount)}</span>
                          </li>
                        ))}
                      </ul>

                      <div className="mt-3 border-t pt-3 flex items-center justify-between">
                        <span className="font-semibold text-gray-800">‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</span>
                        <span className="font-extrabold text-emerald-600">{fmtBaht(total)}</span>
                      </div>

                      <div className="mt-5">
                        <div className="font-semibold text-gray-800 mb-2">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</div>
                        <div className="space-y-2 text-sm text-gray-700">
                          <label className="flex items-center gap-2">
                            <input type="radio" name="payment" checked={paymentMethod === "cash"} onChange={() => setPaymentMethod("cash")} />
                            ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
                          </label>
                          <label className="flex items-center gap-2">
                            <input type="radio" name="payment" checked={paymentMethod === "transfer"} onChange={() => setPaymentMethod("transfer")} />
                            ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
                          </label>
                          <label className="flex items-center gap-2">
                            <input type="radio" name="payment" checked={paymentMethod === "credit"} onChange={() => setPaymentMethod("credit")} />
                            ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
                          </label>
                        </div>
                      </div>

                      <div className="mt-5 space-y-3">
                        <button type="button" onClick={() => window.print()} className="w-full rounded-md bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2">
                          üñ® ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
                        </button>
                        <button type="button" onClick={onConfirmCheckout} disabled={!selectedId || !paymentMethod} className="w-full rounded-md bg-emerald-600 hover:bg-emerald-700 disabled:opacity-60 text-white font-medium px-4 py-2">
                          ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞ Check-out
                        </button>
                        {actionMsg && <p className="text-sm text-center text-gray-700">{actionMsg}</p>}
                      </div>
                    </>
                  )}
                </div>
              </section>
            </div>
          </div>
        </main>
      </div>
    </>
  );
}
