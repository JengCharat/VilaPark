"use client";

import { useEffect, useState } from "react";

// ... (‡∏™‡πà‡∏ß‡∏ô type Stock ‡πÅ‡∏•‡∏∞ LOW_STOCK_THRESHOLD ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
type Stock = {
  id: number;
  category: string;
  name: string;
  quantity: number;
  unit: string;
};

const LOW_STOCK_THRESHOLD = 5;


export default function StockPage() {
  const [stocks, setStocks] = useState<Stock[]>([]);
  const [isLoading, setIsLoading] = useState(true); // üëà 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î

  const loadStocks = async () => {
    setIsLoading(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
    try {
      const res = await fetch("http://localhost:8081/api/stocks");
      if (!res.ok) {
        throw new Error("Failed to fetch stock data");
      }
      const data: Stock[] = await res.json();
      setStocks(data);
    } catch (error) {
      console.error(error);
    } finally {
      setIsLoading(false); // üëà 2. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
    }
  };

  // ... (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô updateStock ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
  const updateStock = async (id: number, action: "increment" | "decrement") => {
    try {
      await fetch(`http://localhost:8081/api/stocks/${id}/${action}`, {
        method: "PUT",
      });
      loadStocks();
    } catch (error) {
      console.error("Failed to update stock:", error);
    }
  };


  useEffect(() => {
    loadStocks();
  }, []);

  // ... (‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• groupedStock, needToOrder, lowStock ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
  const categories = Array.from(new Set(stocks.map((s) => s.category)));
  const groupedStock = categories.map((cat) => ({
    category: cat,
    items: stocks.filter((s) => s.category === cat),
  }));
  const needToOrder = stocks.filter((s) => s.quantity === 0);
  const lowStock = stocks.filter(
    (s) => s.quantity > 0 && s.quantity <= LOW_STOCK_THRESHOLD
  );

  // üëà 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <h1 className="text-2xl font-bold">üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...</h1>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-50 min-h-screen space-y-8">
        <h1 className="text-3xl font-bold text-gray-800">üì¶ ‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h1>
        
        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
        {stocks.length === 0 && !isLoading && (
            <div className="bg-white rounded-xl shadow p-5 text-center">
                <p className="text-gray-500">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å</p>
            </div>
        )}

        {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤) */}
        {stocks.length > 0 && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* ... ‡πÇ‡∏Ñ‡πâ‡∏î map ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ... */}
            {groupedStock.map((group) => (
              <div key={group.category} className="bg-white rounded-xl shadow p-5">
                <h2 className="font-bold text-xl mb-4">{group.category}</h2>
                <ul className="space-y-4">
                  {group.items.map((item) => {
                    let statusColor = "text-green-600";
                    let statusText = "‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠";

                    if (item.quantity === 0) {
                      statusColor = "text-red-600 font-bold";
                      statusText = "‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°";
                    } else if (item.quantity <= LOW_STOCK_THRESHOLD) {
                      statusColor = "text-yellow-600 font-bold";
                      statusText = "‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î";
                    }

                    return (
                      <li key={item.id} className="flex justify-between items-center border-b pb-3">
                        <div>
                          <div className="font-medium">{item.name}</div>
                          <div className={`text-sm ${statusColor}`}>
                            {item.quantity} {item.unit}
                          </div>
                        </div>
                        <div className="flex items-center space-x-3">
                          <span className={`text-sm font-semibold ${statusColor}`}>
                            {statusText}
                          </span>
                          <button onClick={() => updateStock(item.id, "decrement")} className="px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors">-</button>
                          <button onClick={() => updateStock(item.id, "increment")} className="px-3 py-1 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors">+</button>
                        </div>
                      </li>
                    );
                  })}
                </ul>
              </div>
            ))}
          </div>
        )}

        {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ */}
        {(needToOrder.length > 0 || lowStock.length > 0) && (
            <div className="bg-white rounded-xl shadow p-5 space-y-4">
                <h2 className="font-bold text-xl">üõí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h2>
                {/* ... ‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á needToOrder ‡πÅ‡∏•‡∏∞ lowStock ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ... */}
                {needToOrder.length > 0 && (
                  <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded">
                    <h3 className="font-bold text-red-800 mb-2">‚ùó ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:</h3>
                    <ul className="list-disc list-inside text-red-700">
                      {needToOrder.map((s) => (<li key={s.id}>{s.name} - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {s.quantity} {s.unit}</li>))}
                    </ul>
                  </div>
                )}
                {lowStock.length > 0 && (
                  <div className="bg-yellow-50 border-l-4 border-yellow-500 p-4 rounded">
                    <h3 className="font-bold text-yellow-800 mb-2">‚ö†Ô∏è ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î:</h3>
                    <ul className="list-disc list-inside text-yellow-700">
                      {lowStock.map((s) => (<li key={s.id}>{s.name} - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {s.quantity} {s.unit}</li>))}
                    </ul>
                  </div>
                )}
            </div>
        )}
    </div>
  );
}
